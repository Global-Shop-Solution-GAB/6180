
Program.Sub.Preflight.Start
V.Global.bError.Declare(Boolean)
V.Global.bUnattended.Declare(Boolean)
Program.Sub.Preflight.End

Program.Sub.Main.Start
'Written for GM Lighting LLC
'Written by Ashley Collins
'November 23, 2020
F.Intrinsic.Control.Try
Function.Intrinsic.UI.UsePixels ' Allows you to use Pixels instead of Twips throughout

'Open a connection to the database
F.ODBC.Connection!con.OpenConnection(V.Ambient.PDSN, V.Ambient.PUser, V.Ambient.PPass)

'build the datatable of information to create picklists
F.Intrinsic.Control.CallSub(LoadOpenItems)
'zip all the PDFs that were generated from the above subroutine
F.Intrinsic.Control.CallSub(ZipPDFs)

'end the program
F.Intrinsic.Control.CallSub(f_Main_Unload)


F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6180", "ProjectTitle", "AR Batch Packing List Export", "Callback", "f_Main_Unload")
F.Intrinsic.Control.EndTry
Program.Sub.Main.End

Program.Sub.LoadOpenItems.Start
F.Intrinsic.Control.Try
V.Local.iCnt.Declare(Long)
V.Local.dDate.Declare(Date)
V.Local.sDate.Declare(String)
V.Local.sRet.Declare(String)
V.Local.sSQL.Declare(String)

V.Local.dDate.Set(V.Ambient.Date)
F.Intrinsic.String.Format(V.Local.dDate, "YYYY-MM-DD", V.Local.sDate)

'build the query to get all of the invoices that were batched today 
'query sales rep emails from customer master
F.Intrinsic.String.Build("SELECT B.CUSTOMER, A.INVOICE, B.ORDER_NO, B.ORDER_SUFFIX AS SEQ, B.PCK_NO, A.SALESPERSON, D.SALESPERSON AS NAME, D.SALESPERSON_EMAIL AS EMAIL FROM V_AR_OPEN_ITEMS A LEFT JOIN ORDER_HIST_HEAD B ON A.INVOICE = B.INVOICE LEFT JOIN V_ORDER_HEADER C ON B.ORDER_NO = C.ORDER_NO LEFT JOIN GCG_6180_EMAILMAINT D ON A.SALESPERSON = D.ID WHERE A.BATCH_CODE = '10' AND A.DATE_TRANSACTION = '{0}' AND A.ORDER_NO <> '0000000' ORDER BY A.INVOICE", V.Local.sDate, V.Local.sSQL)

'check to see if the datatable already exists. If it does, close it
F.Intrinsic.Control.If(v.DataTable.dtInvoiceList.Exists)
	F.Data.DataTable.Close("dtInvoiceList")
F.Intrinsic.Control.EndIf

'create the datatable
F.Data.DataTable.CreateFromSQL("dtInvoiceList", "con", V.Local.sSQL, True)

'call the sub to print the picklists for the orders
F.Intrinsic.Control.CallSub(PrintPckList)

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6180", "ProjectTitle", "AR Batch Packing List Export", "Callback", "f_Main_Unload")
F.Intrinsic.Control.EndTry
Program.Sub.LoadOpenItems.End

Program.Sub.PrintPckList.Start
F.Intrinsic.Control.Try
V.Local.bExists.Declare(Boolean)
V.Local.iCnt.Declare(Long)
V.Local.iLogID.Declare(Long)
V.Local.iRunID.Declare(Long)
V.Local.sBIRptID.Declare(String)
V.Local.sCust.Declare(String)
V.Local.sDir.Declare(String)
V.Local.sFileName.Declare(String)
V.Local.sInvoiceNo.Declare(String)
V.Local.sOrderNo.Declare(String)
V.Local.sOrderSeq.Declare(String)
V.Local.sPckNo.Declare(String)
V.Local.sSQL.Declare(String)
V.Local.sParams.Declare
V.Local.sValues.Declare

'check to see if the packing list directory exists. If it doesn't, create the directory
F.Intrinsic.String.Build("{0}\PackingListPDFs\", V.Caller.FilesDir,v.Local.sDir)
F.Intrinsic.File.DirExists(V.Local.sDir, V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists,=,False)
	F.Intrinsic.File.CreateDir(V.Local.sDir)
F.Intrinsic.Control.EndIf

'callwrapper 910070
'Invoice No, Order, Seq, Supress-Date (set to "Y" to hide due date"), SUPPRESS-CNDN (set to "Y" to bypass Customs Invoice), LABELS-ONLY (set to "Y" to only print labels), NO-SCREENS (Set to "Y" to bypass user input), PCK-NO, QKPRT-NAME (File name of a btrieve file that contains the PCK-NO and order of the shipments to be printed), SHIP-DATE CCYYMMDD

'check to make sure the invoice datatable isn't empty
F.Intrinsic.Control.If(V.DataTable.dtInvoiceList.RowCount--,>,-1)
	'loop through the datatable to print the picklists and save them to a pdf
	F.Intrinsic.Control.For(V.Local.iCnt, 0, V.DataTable.dtInvoiceList.RowCount--,1)
		V.Local.sCust.Set(V.DataTable.dtInvoiceList(V.Local.iCnt).CUSTOMER!FieldValTrim)
		V.Local.sInvoiceNo.Set(V.DataTable.dtInvoiceList(v.Local.iCnt).INVOICE!FieldValTrim)
		V.Local.sOrderNo.Set(V.DataTable.dtInvoiceList(V.Local.iCnt).ORDER_NO!FieldValTrim)
		V.Local.sPckNo.Set(V.DataTable.dtInvoiceList(V.Local.iCnt).PCK_NO!FieldValTrim)
		
		'building the parameters for the callwrapper
		F.Intrinsic.string.Build("{0}!*!{1}!*!!*!N!*!Y!*!N!*!Y!*!!*!!*!!*!|~|CRYSTAL-OVERRIDE|~|", V.Local.sInvoiceNo,V.Local.sOrderNo, v.local.sParams)
		F.Global.General.CallWrapperSyncBIO(910070,v.local.sParams)
		
		'select the top record from the packing list table to get the report id
		F.Intrinsic.String.Build("SELECT TOP 1 * FROM BI_PACKING_LIST WHERE ORDER_NO = '{0}'", V.Local.sOrderNo, V.Local.sSQL)
		F.ODBC.Connection!con.OpenLocalRecordsetRO("rstPackID", V.Local.sSQL)
		F.Intrinsic.Control.If(V.ODBC.con!rstPackID.EOF,=,False)
			V.Local.sBIRptID.Set(V.ODBC.con!rstPackID.FieldVal!RPTID)
		F.Intrinsic.Control.EndIf
		F.ODBC.con!rstPackID.Close
		
		'check to see if customer directory exists within the packinglistpdf directory
		F.Intrinsic.String.Build("{0}\PackingListPDFs\{1}", V.Caller.FilesDir, V.Local.sCust,v.Local.sDir)
		F.Intrinsic.File.DirExists(V.Local.sDir, v.Local.bExists)
		F.Intrinsic.Control.If(V.Local.bExists,=,False)
			F.Intrinsic.File.CreateDir(V.Local.sDir)
		F.Intrinsic.Control.EndIf
		
		'build the PDF file name
		F.Intrinsic.String.Build("{0}\{1}_{2}_{3}.pdf", V.Local.sDir, V.Local.sCust, V.Local.sPckNo, V.Local.sInvoiceNo, V.Local.sFileName)
		
		'build the parameters string for the savereport function
		F.Intrinsic.String.Split("Terminal*!*REPORTID*!*PCKNO", "*!*", V.Local.sParams)
		'build the values for the savereport function
		F.Intrinsic.String.Build("{0}*!*{1}*!*{2}", V.Caller.Terminal, V.Local.sBIRptID, V.Local.sPckNo, V.Local.sValues)
		F.Intrinsic.String.Split(V.Local.sValues,"*!*",V.Local.sValues)
		'run the savereport function to save the pdf to the customer folder
		F.Global.BI.SaveReport(V.Local.sBIRptID, 1, V.Local.sParams, V.Local.sValues, V.Local.sFileName)
		
	F.Intrinsic.Control.Next(V.Local.iCnt)
F.Intrinsic.Control.Else
	F.Intrinsic.Control.CallSub(f_Main_Unload)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6180", "ProjectTitle", "AR Batch Packing List Export", "Callback", "f_Main_Unload")
F.Intrinsic.Control.EndTry
Program.Sub.PrintPckList.End

Program.Sub.ZipPDFs.Start
F.Intrinsic.Control.Try
V.Local.dDate.Declare(Date)
V.Local.iUser.Declare(Long)
V.Local.iCnt.Declare(Long)
V.Local.sCust.Declare(String)
V.Local.sCustFilePath.Declare(String)
V.Local.sFilePath.Declare(String)
V.Local.sCustFileNames.Declare(String)
V.Local.sFileNames.Declare(String)
v.Local.sFilter.Declare(String)
V.Local.sSalesRep.Declare(String)
V.Local.sName.Declare(String)
V.Local.sEmail.Declare(String)
V.Local.sSelectSplit.Declare(String)
V.Local.sSelect.Declare(String)
V.Local.sZipFile.Declare(String)
V.Local.sDate.Declare(String)
V.Local.sAttach.Declare(String)
V.Local.sAttachName.Declare(String)
V.Local.sCustDir.Declare(String)
V.Local.sAdminEmail.Declare(String)
V.Local.sSender.Declare(String)
V.Local.sRecipient.Declare(String)

'get the userid for the online update user
F.Global.Security.GetUserId(V.Caller.User, V.Caller.CompanyCode, V.Local.iUser)
'read the option for default/administrator email setup in communication options
F.Global.General.ReadOptionCommon(3110,0,0,1,"", V.Local.sAdminEmail)
F.Intrinsic.String.Build("{0}*!*AR Batch Packing List", V.Local.sAdminEmail.Trim, V.Local.sSender)

F.Intrinsic.String.Build("{0}\PackingListPDFs\",V.Caller.FilesDir, V.Local.sFilePath)
F.Intrinsic.File.GetFileList(V.Local.sFilePath, 16,V.Local.sFileNames)

F.Intrinsic.String.Split(V.Local.sFileNames, ":", V.Local.sFileNames)

F.Intrinsic.Control.For(V.Local.iCnt, V.Local.sFileNames.LBound, V.Local.sFileNames.UBound, 1)
	'setting the customer names for the customer folders in the directory
	F.Automation.ZIPPro.Reset()
	V.Local.sCust.Set(V.Local.sFileNames(V.Local.iCnt))
	V.Local.sCustFilePath.Set("")
	v.Local.sCustFileNames.Set("")
	V.Local.sCustDir.Set("")
	'building the file paths for archive file, the files to be zipped and the customer directories
	F.Intrinsic.String.Build("{0}{1}.zip", V.Local.sFilePath, V.Local.sCust, V.Local.sCustFilePath)
	F.Intrinsic.String.Build("{0}{1}\*", V.Local.sFilePath, V.Local.sCust,  v.Local.sCustFileNames)
	F.Intrinsic.String.Build("{0}{1}\",V.Local.sFilePath, V.Local.sCust, V.Local.sCustDir)	

	'setting the zip pro properties and compressing the files
	F.Automation.ZIPPro.SetProperty("ARCHIVEFILE", 0,V.Local.sCustFilePath)
	F.Automation.ZIPPro.IncludeFiles(V.Local.sCustFileNames)
	F.Automation.ZIPPro.Compress()

	
	'selecting the information from the data table for the customer that is being processed currently
	F.Intrinsic.String.Build("CUSTOMER = '{0}' ", V.Local.sCust, V.Local.sFilter)
	F.Data.DataTable.Select("dtInvoiceList", V.Local.sFilter, V.Local.sSelect)
	
	'checking to make sure a record was selected
	F.Intrinsic.Control.If(V.Local.sSelect,<>,"***NORETRUN***")
		F.Intrinsic.String.Split(V.Local.sSelect, "*!*", V.Local.sSelectSplit)
		V.Local.sName.Set("")
		V.Local.sEmail.Set("")
		'pulling the name for the sales person and their contact email
		V.Local.sName.Set(V.DataTable.dtInvoiceList(V.Local.sSelectSplit(0).Long).NAME!FieldValTrim)
		V.Local.sEmail.Set(V.DataTable.dtInvoiceList(V.Local.sSelectSplit(0).Long).EMAIL!FieldValTrim)
		'if the sales rep doesn't have a contact email set up, set the email to Sales@GMlighting.net
		F.Intrinsic.Control.If(V.Local.sEmail.Trim,=,"")
			V.Local.sName.Set("GM Lighting Sales")
			V.Local.sEmail.Set("Sales@GMlighting.net")
		F.Intrinsic.Control.EndIf
		
		F.Intrinsic.String.Build("{0}*!*{1}", V.Local.sName.Trim, V.Local.sEmail.Trim, V.Local.sRecipient)
		'building out the zip file attachment
		F.Intrinsic.String.Build("{0}.zip", V.Local.sCust,V.Local.sAttachName)
		F.Intrinsic.String.Build("{0}*!*{1}", V.Local.sAttachName, V.Local.sFilePath, V.Local.sAttach)
		
			
		'F.Global.Messaging.QueueMessage(sCoCode, iUserID, CallingPrgm, Subject, SenderEmail*!*sSenderName, Recipients, Body, Mode, sReplyToAddress, bReadReceipt, sAdditionalHeaders, dateDeferredDelivery, sMeta0, sMeta1, sMeta2, sMeta3, sMeta4, AttachmentFileName*!*AttachmentFilePath, bDeleteAttach)
		F.Global.Messaging.QueueMessage(V.Caller.CompanyCode, V.Local.iUser, "6180", "Your GM Lighting Packing list is enclosed",V.Local.sSender, V.Local.sRecipient, "Please review the attached Packing Lists.", 5, ,False,,V.Ambient.Date,,,,,, V.Local.sAttach, False)
		'deleting the zip file after the email has been queued
		F.Intrinsic.File.DeleteFile(V.Local.sCustFilePath)
		'deleting the customer folder to ensure it's not processed again in the next pass
		F.Intrinsic.File.DeleteDir(V.Local.sCustDir, True)
		
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Next(V.Local.iCnt)

F.Intrinsic.Control.ExitSub

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6180", "ProjectTitle", "AR Batch Packing List Export", "Callback", "f_Main_Unload")
F.Intrinsic.Control.EndTry
Program.Sub.ZipPDFs.End

Program.Sub.f_Main_Unload.Start
F.Intrinsic.Control.Try
'close the connection to the database
F.ODBC.Connection!con.Close

'end the program
F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.Control.CallSub(ErrorMessage, "ErrorNumber", V.Ambient.ErrorNumber, "ErrorDescription", V.Ambient.ErrorDescription, "Subroutine", V.Ambient.CurrentSubroutine, "UNATTENDED", V.Global.bUnattended, "Project", "6180", "ProjectTitle", "AR Batch Packing List Export", "Callback", "f_Main_Unload")
F.Intrinsic.Control.EndTry
Program.Sub.f_Main_Unload.End

Program.Sub.ErrorMessage.Start
'basic error message for replacing catch block
'this is really just for when printing the message and ending program
'pass error number, error description, current subroutine
'optional callback sub, this will be called before ending
'optional unattended parameters, those subs may not exist if not using them but won't be called
F.Intrinsic.Control.Try

V.Local.iError.Declare(Long)
V.Local.sErrorDescription.Declare(String)
V.Local.sSubroutine.Declare(String)
V.Local.sError.Declare(String)
V.Local.bExists.Declare(Boolean)
V.Local.sCallback.Declare(String)

V.Local.iError.Set(V.Args.ErrorNumber)
V.Local.sErrorDescription.Set(V.Args.ErrorDescription)
V.Local.sSubroutine.Set(V.Args.Subroutine)

'make sure we aren't in an error loop
F.Intrinsic.Control.If(V.Global.bError)
	F.Intrinsic.Control.End

F.Intrinsic.Control.EndIf
V.Global.bError.Set(True)

F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}", V.Caller.ScriptFile, V.Ambient.Newline, V.Local.sSubroutine, V.Local.iError, V.Local.sErrorDescription, V.Ambient.GABVersion, V.Local.sError)

F.Intrinsic.Variable.ArgExists("UNATTENDED", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	F.Intrinsic.Control.If(V.Args.UNATTENDED)
		F.Intrinsic.Control.CallSub(UnattendedErrorMessage, "MESSAGE", V.Local.sError, "PROJECT", V.Args.PROJECT, "PROJECTTITLE", V.Args.PROJECTTITLE)
	F.Intrinsic.Control.Else
'		F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.EndIf
F.Intrinsic.Control.Else
'	F.Intrinsic.UI.Msgbox(V.Local.sError)
F.Intrinsic.Control.EndIf

F.Intrinsic.Variable.ArgExists("Callback", V.Local.bExists)
F.Intrinsic.Control.If(V.Local.bExists)
	V.Local.sCallback.Set(V.Args.Callback.Trim)
	F.Intrinsic.Control.CallSub(V.Local.sCallback)
F.Intrinsic.Control.EndIf

F.Intrinsic.Control.End

F.Intrinsic.Control.Catch
	F.Intrinsic.String.Build("Project: {0}{1}{1}Subroutine: {2}{1}Error Occurred {3} with description {4}{1}{1}GAB Version: {5}",V.Caller.ScriptFile,V.Ambient.Newline,V.Ambient.CurrentSubroutine,V.Ambient.ErrorNumber,V.Ambient.ErrorDescription,V.Ambient.GABVersion,V.Local.sError)
	F.Intrinsic.UI.Msgbox(V.Local.sError)
	F.Intrinsic.Control.End

F.Intrinsic.Control.EndTry
Program.Sub.ErrorMessage.End

Program.Sub.Comments.Start
${$5$}$3.0.0.0$}$1
${$6$}$acollins$}$20210513131751933$}$h98hERc2yV72q0GaUGlwSaoK/aefTdVkB5SGxLdVwE9eeIznpR1azCPFuVr2k3sueTOT9n3UFGwvfaJ+zyTMsg==
Program.Sub.Comments.End